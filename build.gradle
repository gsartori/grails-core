ext {
    def coreBuildFilePath = "https://raw.githubusercontent.com/grails/grails-core/$grailsCoreBranch/gradle.properties"
    def coreBuildFileUrl = new URL(coreBuildFilePath)
    def versionNumberRegex = /projectVersion=(.*)/
    def grailsVersionList = []
    coreBuildFileUrl.eachLine { line ->
        def matcher = (line =~ versionNumberRegex)
        if(matcher) {
            grailsVersionList << matcher[0][1]
        }
    }
    if(!grailsVersionList) {
        throw new GradleException("Could not find Grails version at $coreBuildFilePath")
    } else if(grailsVersionList.size() > 1) {
        throw new GradleException("Multiple Grails versions (${grailsVersionList}) found at $coreBuildFilePath")
    }
    grailsVersion = grailsVersionList[0]
}

subprojects { prj ->
    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    String useMavenLocal = project.findProperty('mavenLocal')
    repositories {
        if (useMavenLocal || useMavenLocal != 'last') {
            println "Using mavenLocal() first on project `${prj.name}`"
            mavenLocal()
        }

        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
        if(groovyVersion.endsWith('-SNAPSHOT')) {
            maven {
                name = 'ASF Snapshot repo'
                url = 'https://repository.apache.org/content/repositories/snapshots'
            }
        }
        if (useMavenLocal == 'last') {
            println "Using mavenLocal() last on project `${prj.name}`"
            mavenLocal()
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }
    }
    apply plugin: 'java'

    compileJava.options.release = 17
}
