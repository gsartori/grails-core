import io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath 'io.github.gradle-nexus:publish-plugin:1.3.0'
        classpath "org.grails:grails-gradle-plugin:${grailsGradlePluginVersion}"
        classpath "org.grails:grails-docs:${grailsVersion}"
    }
}

plugins {
    id 'groovy'
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'

version = projectVersion
ext.set('isSnapshot', projectVersion.endsWith('-SNAPSHOT'))
ext.set('isReleaseVersion', !isSnapshot)

String customGroovyVersion = findProperty('groovyVersion') ?: System.getenv('GROOVY_VERSION')
if (customGroovyVersion) {
    logger.warn("Using custom Groovy version: $customGroovyVersion")
}

if (isReleaseVersion) {
    nexusPublishing {
        String nexusUser = System.getenv('SONATYPE_USERNAME')
        String nexusPass = System.getenv('SONATYPE_PASSWORD')
        String nexusStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID')
        repositories {
            sonatype {
                nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
                username = nexusUser
                password = nexusPass
                stagingProfileId = nexusStagingProfileId
            }
        }
    }
}


subprojects {
    apply plugin: 'groovy'

    version = rootProject.version

    if (customGroovyVersion) {
        configurations.configureEach {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.apache.groovy') {
                    details.useVersion(customGroovyVersion)
                }
            }
        }
    }

    repositories {
        mavenCentral()
        maven { url = 'https://repo.grails.org/grails/core' }
        // mavenLocal() // Keep, this will be uncommented and used by CI (groovy-joint-workflow)
        if (customGroovyVersion?.endsWith('-SNAPSHOT')) {
            // Used for testing locally against the latest snapshot of Groovy
            // Usage: ./gradlew build -P"groovyVersion=X.X.X-SNAPSHOT"
            maven {
                name = 'ASF Snapshot repo'
                url = 'https://repository.apache.org/content/repositories/snapshots'
            }
        }
        if (System.getenv('GITHUB_MAVEN_PASSWORD') && !grailsVersion.endsWith('-SNAPSHOT')) {
            // Used during the release process to access modules temporarily published to GitHub Packages
            logger.warn("Adding Grails Core Repo to $name")
            maven {
                url = 'https://maven.pkg.github.com/grails/grails-core'
                credentials {
                    username = 'DOES_NOT_MATTER'
                    password = System.getenv('GITHUB_MAVEN_PASSWORD')
                }
            }
        }
    }
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(InitializeNexusStagingRepository).configureEach {
    shouldRunAfter tasks.withType(Sign)
}