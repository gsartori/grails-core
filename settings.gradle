plugins {
    id 'com.gradle.develocity' version '3.18.2'
    id 'com.gradle.common-custom-user-data-gradle-plugin' version '2.0.2'
}

def isCI = System.getenv('CI') != null
def isLocal = !isCI
def isAuthenticated = System.getenv('DEVELOCITY_ACCESS_KEY') != null
def isBuildCacheAuthenticated =
        System.getenv('DEVELOCITY_BUILD_CACHE_NODE_USER') != null &&
        System.getenv('DEVELOCITY_BUILD_CACHE_NODE_KEY') != null

develocity {
    server = 'https://ge.grails.org'
    buildScan {
        publishing.onlyIf { isAuthenticated }
        uploadInBackground = isLocal
    }
}

buildCache {
    local { enabled = isLocal }
    remote(develocity.buildCache) {
        push = isCI && isBuildCacheAuthenticated
        enabled = true
        usernameAndPassword(
                System.getenv('DEVELOCITY_BUILD_CACHE_NODE_USER') ?: '',
                System.getenv('DEVELOCITY_BUILD_CACHE_NODE_KEY') ?: ''
        )
    }
}

rootProject.name = 'grails.core.ROOT'

include (
        'grails-bootstrap',
        'grails-codecs',
        'grails-console',
        'grails-core',
        'grails-databinding',
        'grails-docs',
        'grails-encoder',
        'grails-logging',
        'grails-shell',
        'grails-spring',
        'grails-test',
        'grails-web',
        'grails-web-common',
        'grails-web-boot',
        'grails-web-databinding',
        'grails-web-mvc',
        'grails-web-url-mappings',

        // test support
        'grails-testing-support',

        // POM / BOMs
        'grails-dependencies',
        'grails-bom',

        // Plugins
        'grails-plugin-codecs',
        'grails-plugin-controllers',
        'grails-plugin-converters',
        'grails-plugin-databinding',
        'grails-plugin-datasource',
        'grails-plugin-domain-class',
        'grails-plugin-interceptors',
        'grails-plugin-i18n',
        'grails-plugin-mimetypes',
        'grails-plugin-rest',
        'grails-plugin-services',
        'grails-plugin-url-mappings',
        'grails-plugin-validation',

        // Test Suite
        'grails-test-suite-base',
        'grails-test-suite-persistence',
        'grails-test-suite-uber',
        'grails-test-suite-web',

        // Gradle Plugin
        'grails-gradle-model',

        // events
        'grails-events-core',
        'grails-events-compat',
        'grails-events-transform',
        'grails-events-gpars',
        'grails-events-spring',
        'grails-events-rxjava',
        'grails-events-rxjava2',
        'grails-events-rxjava3',
        'grails-events-plugin',

        // async
        'grails-async-core',
        'grails-async-gpars',
        'grails-async-rxjava',
        'grails-async-rxjava2',
        'grails-async-rxjava3',
        'grails-async-plugin',
)

// Instead of using : to separate nested projects, fix the project directories by setting the projectDir explicitly
// (Preserve the parent directory name as part of the nested project name)
project(':grails-events-core').projectDir = file('grails-events/core')
project(':grails-events-compat').projectDir = file('grails-events/compat')
project(':grails-events-transform').projectDir = file('grails-events/transform')
project(':grails-events-gpars').projectDir = file('grails-events/gpars')
project(':grails-events-spring').projectDir = file('grails-events/spring')
project(':grails-events-rxjava').projectDir = file('grails-events/rxjava')
project(':grails-events-rxjava2').projectDir = file('grails-events/rxjava2')
project(':grails-events-rxjava3').projectDir = file('grails-events/rxjava3')
project(':grails-events-plugin').projectDir = file('grails-events/plugin')

project(':grails-async-core').projectDir = file('grails-async/core')
project(':grails-async-gpars').projectDir = file('grails-async/gpars')
project(':grails-async-rxjava').projectDir = file('grails-async/rxjava')
project(':grails-async-rxjava2').projectDir = file('grails-async/rxjava2')
project(':grails-async-rxjava3').projectDir = file('grails-async/rxjava3')
project(':grails-async-plugin').projectDir = file('grails-async/plugin')