import java.nio.file.Files

allprojects { project ->
    rootProject.file("../gradle.properties").withReader {
        Properties props = new Properties()
        props.load(it)

        for (Map.Entry<Object, Object> prop : props.entrySet()) {
            if(prop.value) {
                project.ext[prop.key as String] = prop.value
            }
        }

        project.ext['grailsVersion'] = props.getProperty('projectVersion')
    }

    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
        if(project['groovy.version'].endsWith('-SNAPSHOT')) {
            maven {
                name = 'ASF Snapshot repo'
                url = 'https://repository.apache.org/content/repositories/snapshots'
            }
        }
    }
}

Collection<Project> grailsProjects = rootProject.subprojects.findAll {
    !Files.exists(rootProject.projectDir.toPath().resolve(it.name))
}
subprojects { prj ->
    if(grailsProjects.contains(prj) ) {
        // No customizations for grails projects
        return
    }

    // Never cache functional tests
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    apply plugin: 'java'
    compileJava.options.release = 17

    // Test projects will often include dependencies from grails-core, this file will ensure any dependencies included
    // will be substituted with projects in this repository instead of pulling upstream
    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                for (Project grailsProject : grailsProjects) {
                    //TODO: Ideally the mapped artifacts would be setup via composition so these could be easily imported here, for now duplicate the mappings from the root
                    def mappedArtifactIds = [
                            'grails-async-core'       : 'grails-async',
                            'grails-async-plugin'     : 'async',
                            'grails-events-core'      : 'grails-events',
                            'grails-events-plugin'    : 'events',
                            'grails-plugin-converters': 'converters'
                    ]
                    def artifactId = mappedArtifactIds[grailsProject.name] ?: grailsProject.name
                    substitute module("${grailsProject.name in ['grails-async-plugin', 'grails-events-plugin'] ? 'org.grails.plugins' : 'org.grails'}:${artifactId}") using project(":${grailsProject.name}")
                }
            }
        }
    }

    tasks.withType(Test).configureEach {
        onlyIf {
            !project.hasProperty('skipFunctionalTests')
        }
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"

            showExceptions true
            exceptionFormat "full"
            showCauses true
            showStackTraces true
        }
    }
}
